<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProductReviewMapper">
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="productReviewMap"
		type="study.spring.withfivebird.model.ProductReview">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="product_review_no" column="product_review_no" />
		<result property="product_review_title"
			column="product_review_title" />
		<result property="product_review_content"
			column="product_review_content" />
		<result property="product_review_hit"
			column="product_review_hit" />
		<result property="product_review_reg_date"
			column="product_review_reg_date" />
		<result property="order_check_no" column="order_check_no" />
		<result property="user_no" column="user_no" />
	</resultMap>

	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="study.spring.withfivebird.model.ProductReview"
		resultMap="productReviewMap">
		SELECT product_review_no, product_review_title,
		product_review_content, product_review_hit, product_review_reg_date,
		order_check_no, user_no FROM product_review WHERE
		product_review_no=#{product_review_no};
	</select>
	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="study.spring.withfivebird.model.ProductReview"
		resultMap="productReviewMap">
		SELECT * FROM product_review
   		
   		<where>
   			<if test="user_no != null and user_no != ''">
   				user_no LIKE concat('%',#{user_no},'%')
   			</if>
   		</where>
   		ORDER BY product_review_no DESC
	</select>

	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="study.spring.withfivebird.model.ProductReview"
		useGeneratedKeys="true" keyProperty="product_review_no">
		INSERT INTO product_review
		(product_review_title, product_review_content, product_review_hit,
		product_review_reg_date,
		order_check_no, user_no) VALUES
		(#{product_review_title},#{product_review_content},#{product_review_hit},#{product_review_reg_date},#{order_check_no},#{user_no});
	</insert>
	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="study.spring.withfivebird.model.ProductReview">
		DELETE FROM product_review WHERE product_review_no=#{product_review_no};
	</delete>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="study.spring.withfivebird.model.ProductReview">
		UPDATE product_review SET product_review_title=#{product_review_title}, product_review_content=#{product_review_content}
		WHERE product_review_no=#{product_review_no};
	</update>
	<!-- 데이터 수 조회하기 -->
	<!-- 조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다. count, max, min, sum, avg 함수를 사용한 
		경우 Mapper에서는 resultMap이 아닌 resultType으로 반환한다. -->
	<select id="selectCountAll"
		parameterType="study.spring.withfivebird.model.ProductReview"
		resultType="int">
		SELECT COUNT(*) FROM product_review

		<where>
			<if
				test="product_review_title != null and product_review_title != ''">
				product_review_title LIKE concat('%', #{product_review_title},
				'%')
			</if>

			<if
				test="product_review_content != null and product_review_content != ''">
				OR product_review_content LIKE concat('%',
				#{product_review_content}, '%')
			</if>
		</where>


	</select>
</mapper>
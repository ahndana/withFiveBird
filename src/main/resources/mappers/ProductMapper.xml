<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProductMapper">
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="productMap"
		type="study.spring.withfivebird.model.Product">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="product_no" column="product_no" />
		<result property="product_name" column="product_name" />
		<result property="product_content" column="product_content" />
		<result property="product_price" column="product_price" />
		<result property="product_best" column="product_best" />
		<result property="product_new" column="product_new" />
		<result property="product_img" column="product_img" />
		<result property="product_sale" column="product_sale" />
		<result property="category_no" column="category_no" />
		<result property="product_size_no1" column="product_size_no1" />
		<result property="product_size_no2" column="product_size_no2" />
		<result property="product_size_no3" column="product_size_no3" />
		<result property="product_color_no1" column="product_color_no1" />
		<result property="product_color_no2" column="product_color_no2" />
		<result property="product_color_no3" column="product_color_no3" />
		<result property="product_detail_img1"
			column="product_detail_img1" />
		<result property="product_detail_img2"
			column="product_detail_img2" />
		<result property="product_detail_img3"
			column="product_detail_img3" />
		<result property="product_detail_img4"
			column="product_detail_img4" />
		<result property="product_detail_content" column="product_detail_content" />
	</resultMap>

	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="study.spring.withfivebird.model.Product"
		resultMap="productMap">
		SELECT product_name, product_content,
		product_price, product_best, product_new,
		product_img, product_sale,category_no,product_size_no1,product_size_no2,product_size_no3, 
		product_color_no1,product_color_no2,product_color_no3,product_detail_img1,product_detail_img2,product_detail_img3,product_detail_img4,product_detail_content 
		FROM product p
		
		WHERE
		product_no=#{product_no};
	</select>
	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="study.spring.withfivebird.model.Product"
		resultMap="productMap">
		SELECT product_name, product_content,
		product_price, product_best, product_new,
		product_img, product_sale,category_no,product_size_no1,product_size_no2,product_size_no3, 
		product_color_no1,product_color_no2,product_color_no3,product_detail_img1,product_detail_img2,product_detail_img3,product_detail_img4,product_detail_content 
		FROM product

		<where>
			<if
				test="product_name != null and product_name != ''">
				product_name LIKE concat('%', #{product_name},
				'%')
			</if>

			<if
				test="product_no != null and product_no != ''">
				OR product_no LIKE concat('%',
				#{product_no}, '%')
			</if>
		</where>

		ORDER BY product_no DESC
	</select>

	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="study.spring.withfivebird.model.Product"
		useGeneratedKeys="true" keyProperty="product_no">
		INSERT INTO product
		(product_name, product_content,
		product_price, product_best, product_new,
		product_img, product_sale,category_no,product_size_no1,product_size_no2,product_size_no3, 
		product_color_no1,product_color_no2,product_color_no3,product_detail_img1,product_detail_img2,product_detail_img3,product_detail_img4,product_detail_content 
		) VALUES
		(#{product_name},#{product_content},#{product_price},#{product_best},#{product_new},
		#{product_img},#{product_sale},#{category_no},#{product_size_no1},#{product_size_no2},
		#{product_size_no3},#{product_color_no1},#{product_color_no2},#{product_color_no3},#{product_detail_img1},
		#{product_detail_img2},#{product_detail_img3},#{product_detail_img4},#{product_detail_content});
	</insert>
	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="study.spring.withfivebird.model.Product">
		DELETE FROM product WHERE
		product_no=#{product_no};
	</delete>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="study.spring.withfivebird.model.Product">
		UPDATE product SET
		product_detail_content=#{product_detail_content}
		WHERE
		product_no=#{product_no};
	</update>
	<!-- 데이터 수 조회하기 -->
	<!-- 조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다. count, max, min, sum, avg 함수를 사용한 
		경우 Mapper에서는 resultMap이 아닌 resultType으로 반환한다. -->
	<select id="selectCountAll"
		parameterType="study.spring.withfivebird.model.Product"
		resultType="int">
		SELECT COUNT(*) FROM product

		<where>
			<if
				test="product_name != null and product_name != ''">
				product_name LIKE concat('%', #{product_name},
				'%')
			</if>

			<if
				test="product_no != null and product_no != ''">
				OR product_no LIKE concat('%',
				#{product_no}, '%')
			</if>
		</where>


	</select>
	
	<select id="selectJoin"
		parameterType="study.spring.withfivebird.model.Product"
		resultMap="productMap">
		SELECT product_name, product_content,
		product_price, product_best, product_new,
		product_img, product_sale,category_no,product_size_no1,product_size_no2,product_size_no3, 
		product_color_no1,product_color_name,product_color_no2,product_color_name,product_color_no3,product_color_name,product_detail_img1,product_detail_img2,product_detail_img3,product_detail_img4,product_detail_content 
		FROM product p
		INNER JOIN product_color c ON p.product_color_no1 = c.product_color_no
		WHERE product_color_no
		product_no=#{product_no}
	</select>
</mapper>